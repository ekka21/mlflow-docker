version: '3.2'

services:
  create_buckets:
    image: minio/mc:RELEASE.2019-07-17T22-13-42Z
    depends_on:
      - s3
    networks:
      - A
    entrypoint: >
      /bin/sh -c '
      sleep 5;
      /usr/bin/mc config host add s3 http://s3:${MINIO_PORT} ${MINIO_ACCESS_KEY} ${MINIO_SECRET_ACCESS_KEY} --api S3v4;
      [[ ! -z "`/usr/bin/mc ls s3 | grep challenge`" ]] || /usr/bin/mc mb s3/${MLFLOW_BUCKET_NAME};
      /usr/bin/mc policy download s3/${MLFLOW_BUCKET_NAME};
      exit 0;
      '
  s3:
    image: minio/minio:latest
    container_name: aws-s3
    ports:
      - 9000:9000
    command: 
      server /date
    networks:
      - A
    volumes:
      - ./s3:/date
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
  db:
    restart: always
    image: postgres:11
    container_name: mlflow_db
    expose:
      - "${PG_PORT}"
    networks:
      - A
    environment:
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_PASSWORD=${PG_PASSWORD}
      - POSTGRES_DATABASE=${PG_DATABASE}
    volumes:
      - db_data:/var/lib/postgresql/data/
  mlflow:
      container_name: tracker_mlflow
      image: tracker_ml
      build:
          context: ./mlflow
          dockerfile: Dockerfile
      ports:
        - "5000:5000"
      environment: 
        - MLFLOW_S3_ENDPOINT_URL=http://s3:9000
        - AWS_ACCESS_KEY_ID=${MINIO_ACCESS_KEY}
        - AWS_SECRET_ACCESS_KEY=${MINIO_SECRET_ACCESS_KEY}
        - MLFLOW_S3_ENDPOINT_URL=http://s3:${MINIO_PORT}
      networks:
          - A
      entrypoint: ./wait-for-it.sh db:5432 -t 60 -- mlflow server --backend-store-uri postgresql://${PG_USER}:${PG_PASSWORD}@db:${PG_PORT}/${PG_DATABASE} --default-artifact-root s3://${MLFLOW_BUCKET_NAME}/ -h 0.0.0.0

networks:
    A:
      driver: bridge